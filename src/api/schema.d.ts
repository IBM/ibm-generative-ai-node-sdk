/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v2/text/generation/{id}/feedback": {
    /**
     * @deprecated
     * @description Use `/requests/:id/feedback`
     */
    get: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                id: number;
                /** Format: date-time */
                created_at: string;
                /** Format: date-time */
                updated_at: string;
                comment?: string | null;
                categories: string[];
                api_request: string;
                /** @enum {string|null} */
                vote?: "up" | "down" | null;
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
    /**
     * @deprecated
     * @description Use `/requests/:id/feedback`
     */
    put: {
      parameters: {
        query: {
          version: "2024-02-20";
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            comment?: string;
            categories?: ("inaccurate" | "not_relevant" | "offensive_harmful" | "knowledge_gap" | "other_content" | "too_long" | "too_short" | "wrong_tone" | "wrong_format" | "other_style" | "correct_content" | "correct_style")[];
            /** @enum {string} */
            vote?: "up" | "down";
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                id: number;
                /** Format: date-time */
                created_at: string;
                /** Format: date-time */
                updated_at: string;
                comment?: string | null;
                categories: string[];
                api_request: string;
                /** @enum {string|null} */
                vote?: "up" | "down" | null;
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
    /**
     * @deprecated
     * @description Use `/requests/:id/feedback`
     */
    post: {
      parameters: {
        query: {
          version: "2024-02-20";
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            comment?: string;
            categories?: ("inaccurate" | "not_relevant" | "offensive_harmful" | "knowledge_gap" | "other_content" | "too_long" | "too_short" | "wrong_tone" | "wrong_format" | "other_style" | "correct_content" | "correct_style")[];
            /** @enum {string} */
            vote?: "up" | "down";
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                id: number;
                /** Format: date-time */
                created_at: string;
                /** Format: date-time */
                updated_at: string;
                comment?: string | null;
                categories: string[];
                api_request: string;
                /** @enum {string|null} */
                vote?: "up" | "down" | null;
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/tuning_types": {
    get: {
      parameters: {
        query: {
          version: "2024-01-30";
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              results: {
                  id?: string;
                  name?: string;
                  /** @description JSON Schema */
                  schema?: {
                    [key: string]: unknown;
                  };
                  model_ids?: string[];
                }[];
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/models/{id}": {
    get: {
      parameters: {
        query: {
          version: "2024-01-30";
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                tasks: {
                    id: string;
                    name: string;
                    json_example?: string;
                    jsonl_example?: string;
                    csv_example?: string;
                    verbalizer?: string;
                    file_format_id?: number;
                    tune: boolean;
                    categorization: boolean;
                  }[];
                model_family: {
                  id: number;
                  name: string;
                  system_prompt?: string;
                  prompt_example?: string;
                  short_description?: string;
                  description?: string;
                };
                system_prompt?: string;
                id: string;
                name: string;
                developer?: string;
                size: string;
                label: string;
                disabled: boolean;
                preferred: boolean;
                warning?: string;
                description?: string;
                tags: string[];
                source_model_id?: string | null;
                is_live: boolean;
                token_limits: {
                    beam_width: number;
                    token_limit: number;
                  }[];
                system_prompt_id?: number;
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/text/tokenization": {
    post: {
      parameters: {
        query: {
          version: "2024-01-10";
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            model_id?: string;
            prompt_id?: string;
            input?: string | string[];
            data?: {
              example_file_ids?: string[];
              [key: string]: unknown;
            };
            parameters?: ({
              return_options?: {
                input_text?: boolean | null;
                tokens?: boolean | null;
              };
            }) | null;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              model_id: string;
              created_at: string;
              results: ({
                  token_count: number;
                  tokens?: string[];
                  input_text?: string | null;
                })[];
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/text/generation_stream": {
    post: {
      parameters: {
        query: {
          version: "2024-01-10";
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            data?: {
              example_file_ids?: string[];
              [key: string]: unknown;
            };
            /**
             * Input string
             * @description The input is the prompt to generate completions, passed as a string. Note: The method tokenizes the input internally. It is recommended not to leave any trailing spaces.
             */
            input?: string;
            /**
             * Model ID
             * @description The ID of the model or tune to be used for this request.
             */
            model_id?: string;
            /** Saved prompt Id */
            prompt_id?: string;
            parameters?: ({
              /**
               * Top K
               * @description Set the number of highest probability vocabulary tokens to keep for top-k-filtering. Lower values make it less likely the model will go off topic.
               */
              top_k?: number | null;
              /**
               * Top P (nucleus sampling)
               * @description If < 1.0, only the smallest set of most probable tokens with probabilities that add up to `top_p` or higher are used.
               */
              top_p?: number | null;
              /**
               * Typical P
               * @description Local typicality measures how similar the conditional probability of predicting a target token next is to the expected conditional probability of predicting a random token next, given the partial text already generated. If set to float < 1, the smallest set of the most locally typical tokens with probabilities that add up to typical_p or higher are kept for generation. 1.00 means a neutral value.
               */
              typical_p?: number | null;
              /**
               * Beam width
               * @description At each step, or token, the algorithm keeps track of the n (off=1, 2, or 3) most probable sequences (beams) and selects the one with the highest probability. This continues until the stop sequence is met.
               */
              beam_width?: number | null;
              /**
               * Time limit
               * @description Time limit in milliseconds - if not completed within this time, generation will stop. The text generated so far will be returned along with the `TIME_LIMIT` stop reason.
               */
              time_limit?: number | null;
              /**
               * Random seed
               * @description Controls the random sampling of the generated tokens when sampling is enabled. Setting the random seed to a the same number for each generation ensures experimental repeatability.
               */
              random_seed?: number | null;
              /**
               * Temperature
               * @description Control the creativity of generated text. Higher values will lead to more randomly generated outputs.
               */
              temperature?: number | null;
              /**
               * Length penalty
               * @description Can be used to exponentially increase the likelihood of the text generation terminating once a specified number of tokens have been generated.
               */
              length_penalty?: ({
                /**
                 * Start index
                 * @description A number of generated tokens after which this should take effect.
                 */
                start_index?: number | null;
                /**
                 * Decay factor
                 * @description Represents the factor of exponential decay and must be > 1.0. Larger values correspond to more aggressive decay.
                 */
                decay_factor?: number | null;
              }) | null;
              /**
               * Max new tokens
               * @description Define the maximum number of tokens to generate.
               */
              max_new_tokens?: number | null;
              /**
               * Min new tokens
               * @description If stop sequences are given, they are ignored until minimum tokens are generated.
               */
              min_new_tokens?: number | null;
              return_options?: ({
                /**
                 * Input text
                 * @description Include input text
                 * @default false
                 */
                input_text?: boolean | null;
                /**
                 * Token ranks
                 * @description Include rank of each returned token
                 * @default false
                 */
                token_ranks?: boolean | null;
                /**
                 * Input Tokens
                 * @description Include list of input tokens
                 * @default false
                 */
                input_tokens?: boolean | null;
                /**
                 * Top N tokens
                 * @description Include top n candidate tokens at the position of each returned token
                 */
                top_n_tokens?: number | null;
                /**
                 * Token logprobs
                 * @description Include logprob for each returned token
                 * @default false
                 */
                token_logprobs?: boolean | null;
                /**
                 * Generated Tokens
                 * @description Include list of individual generated tokens
                 * @default false
                 */
                generated_tokens?: boolean | null;
                input_parameters?: boolean | null;
              }) | null;
              /**
               * Stop sequences
               * @description Stop sequences are one or more strings which will cause the text generation to stop if/when they are produced as part of the output. Stop sequences encountered prior to the minimum number of tokens being generated will be ignored.
               */
              stop_sequences?: string[] | null;
              /**
               * Decoding method
               * @description Decoding method used for generation.
               * @enum {string|null}
               */
              decoding_method?: "greedy" | "sample" | null;
              /**
               * Repetition penalty
               * @description The parameter for repetition penalty. 1.00 means no penalty.
               */
              repetition_penalty?: number | null;
              include_stop_sequence?: boolean;
              /**
               * Truncate input tokens
               * @description Truncate to this many input tokens. Can be used to avoid requests failing due to input being longer than configured limits. Zero means don't truncate.
               */
              truncate_input_tokens?: number | null;
            }) | null;
            moderations?: {
              hap?: boolean | {
                /**
                 * @description Detects HAP (hateful, abusive, or profane language). Please see documentation for more info (API Reference -> Moderations -> HAP).
                 * @default true
                 */
                input?: boolean;
                output?: boolean;
                /**
                 * @description The higher the number, the more confidence that the sentence contains HAP. The threshold allows you to modify how much confidence is needed for the sentence to be flagged as containing HAP.
                 * @default 0.75
                 */
                threshold?: number;
                /** @default false */
                send_tokens?: boolean;
              };
              stigma?: boolean | {
                /**
                 * @description Detects Stigma.
                 * @default true
                 */
                input?: boolean;
                output?: boolean;
                /**
                 * @description The higher the number, the more confidence that the sentence contains Stigma. The threshold allows you to modify how much confidence is needed for the sentence to be flagged as containing Stigma.
                 * @default 0.75
                 */
                threshold?: number;
                /** @default false */
                send_tokens?: boolean;
              };
              implicit_hate?: boolean | {
                /**
                 * @description Detects implicit hate.
                 * @default true
                 */
                input?: boolean;
                output?: boolean;
                /**
                 * @description The higher the number, the more confidence that the sentence contains implicit hate. The threshold allows you to modify how much confidence is needed for the sentence to be flagged as containing implicit hate.
                 * @default 0.75
                 */
                threshold?: number;
                /** @default false */
                send_tokens?: boolean;
              };
            };
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "text/event-stream": {
              id?: string | null;
              model_id: string;
              /** Format: date-time */
              created_at?: string;
              input_parameters?: {
                [key: string]: unknown;
              } | null;
              results?: ({
                  input_text?: string | null;
                  generated_text: string;
                  generated_token_count: number;
                  input_token_count?: number | null;
                  /** @enum {string} */
                  stop_reason: "not_finished" | "max_tokens" | "eos_token" | "cancelled" | "time_limit" | "stop_sequence" | "token_limit" | "error";
                  stop_sequence?: string | null;
                  generated_tokens?: (({
                      text?: string | null;
                      logprob?: (number | null) | (string | null);
                      rank?: number | null;
                      top_tokens?: (({
                          text?: string | null;
                          logprob?: (number | null) | (string | null);
                        })[]) | null;
                    })[]) | null;
                  input_tokens?: (({
                      text?: string | null;
                      logprob?: (number | null) | (string | null);
                      rank?: number | null;
                      top_tokens?: (({
                          text?: string | null;
                          logprob?: (number | null) | (string | null);
                        })[]) | null;
                    })[]) | null;
                  seed?: number | null;
                  [key: string]: unknown;
                })[];
              moderation?: {
                hap?: {
                    success: boolean;
                    score: number;
                    flagged: boolean;
                    position: {
                      start: number;
                      end: number;
                    };
                    tokens?: {
                        token?: string;
                        index?: number;
                        score?: number;
                      }[];
                  }[];
                stigma?: {
                    success: boolean;
                    score: number;
                    flagged: boolean;
                    position: {
                      start: number;
                      end: number;
                    };
                    tokens?: {
                        token?: string;
                        index?: number;
                        score?: number;
                      }[];
                  }[];
                implicit_hate?: {
                    success: boolean;
                    score: number;
                    flagged: boolean;
                    position: {
                      start: number;
                      end: number;
                    };
                    tokens?: {
                        token?: string;
                        index?: number;
                        score?: number;
                      }[];
                  }[];
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/text/generation": {
    post: {
      parameters: {
        query: {
          version: "2024-01-10";
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            data?: {
              example_file_ids?: string[];
              [key: string]: unknown;
            };
            /**
             * Input string
             * @description The input is the prompt to generate completions, passed as a string. Note: The method tokenizes the input internally. It is recommended not to leave any trailing spaces.
             */
            input?: string;
            /**
             * Model ID
             * @description The ID of the model or tune to be used for this request.
             */
            model_id?: string;
            /** Saved prompt Id */
            prompt_id?: string;
            parameters?: ({
              /**
               * Top K
               * @description Set the number of highest probability vocabulary tokens to keep for top-k-filtering. Lower values make it less likely the model will go off topic.
               */
              top_k?: number | null;
              /**
               * Top P (nucleus sampling)
               * @description If < 1.0, only the smallest set of most probable tokens with probabilities that add up to `top_p` or higher are used.
               */
              top_p?: number | null;
              /**
               * Typical P
               * @description Local typicality measures how similar the conditional probability of predicting a target token next is to the expected conditional probability of predicting a random token next, given the partial text already generated. If set to float < 1, the smallest set of the most locally typical tokens with probabilities that add up to typical_p or higher are kept for generation. 1.00 means a neutral value.
               */
              typical_p?: number | null;
              /**
               * Beam width
               * @description At each step, or token, the algorithm keeps track of the n (off=1, 2, or 3) most probable sequences (beams) and selects the one with the highest probability. This continues until the stop sequence is met.
               */
              beam_width?: number | null;
              /**
               * Time limit
               * @description Time limit in milliseconds - if not completed within this time, generation will stop. The text generated so far will be returned along with the `TIME_LIMIT` stop reason.
               */
              time_limit?: number | null;
              /**
               * Random seed
               * @description Controls the random sampling of the generated tokens when sampling is enabled. Setting the random seed to a the same number for each generation ensures experimental repeatability.
               */
              random_seed?: number | null;
              /**
               * Temperature
               * @description Control the creativity of generated text. Higher values will lead to more randomly generated outputs.
               */
              temperature?: number | null;
              /**
               * Length penalty
               * @description Can be used to exponentially increase the likelihood of the text generation terminating once a specified number of tokens have been generated.
               */
              length_penalty?: ({
                /**
                 * Start index
                 * @description A number of generated tokens after which this should take effect.
                 */
                start_index?: number | null;
                /**
                 * Decay factor
                 * @description Represents the factor of exponential decay and must be > 1.0. Larger values correspond to more aggressive decay.
                 */
                decay_factor?: number | null;
              }) | null;
              /**
               * Max new tokens
               * @description Define the maximum number of tokens to generate.
               */
              max_new_tokens?: number | null;
              /**
               * Min new tokens
               * @description If stop sequences are given, they are ignored until minimum tokens are generated.
               */
              min_new_tokens?: number | null;
              return_options?: ({
                /**
                 * Input text
                 * @description Include input text
                 * @default false
                 */
                input_text?: boolean | null;
                /**
                 * Token ranks
                 * @description Include rank of each returned token
                 * @default false
                 */
                token_ranks?: boolean | null;
                /**
                 * Input Tokens
                 * @description Include list of input tokens
                 * @default false
                 */
                input_tokens?: boolean | null;
                /**
                 * Top N tokens
                 * @description Include top n candidate tokens at the position of each returned token
                 */
                top_n_tokens?: number | null;
                /**
                 * Token logprobs
                 * @description Include logprob for each returned token
                 * @default false
                 */
                token_logprobs?: boolean | null;
                /**
                 * Generated Tokens
                 * @description Include list of individual generated tokens
                 * @default false
                 */
                generated_tokens?: boolean | null;
                input_parameters?: boolean | null;
              }) | null;
              /**
               * Stop sequences
               * @description Stop sequences are one or more strings which will cause the text generation to stop if/when they are produced as part of the output. Stop sequences encountered prior to the minimum number of tokens being generated will be ignored.
               */
              stop_sequences?: string[] | null;
              /**
               * Decoding method
               * @description Decoding method used for generation.
               * @enum {string|null}
               */
              decoding_method?: "greedy" | "sample" | null;
              /**
               * Repetition penalty
               * @description The parameter for repetition penalty. 1.00 means no penalty.
               */
              repetition_penalty?: number | null;
              include_stop_sequence?: boolean;
              /**
               * Truncate input tokens
               * @description Truncate to this many input tokens. Can be used to avoid requests failing due to input being longer than configured limits. Zero means don't truncate.
               */
              truncate_input_tokens?: number | null;
            }) | null;
            moderations?: {
              hap?: boolean | {
                /**
                 * @description Detects HAP (hateful, abusive, or profane language). Please see documentation for more info (API Reference -> Moderations -> HAP).
                 * @default true
                 */
                input?: boolean;
                output?: boolean;
                /**
                 * @description The higher the number, the more confidence that the sentence contains HAP. The threshold allows you to modify how much confidence is needed for the sentence to be flagged as containing HAP.
                 * @default 0.75
                 */
                threshold?: number;
                /** @default false */
                send_tokens?: boolean;
              };
              stigma?: boolean | {
                /**
                 * @description Detects Stigma.
                 * @default true
                 */
                input?: boolean;
                output?: boolean;
                /**
                 * @description The higher the number, the more confidence that the sentence contains Stigma. The threshold allows you to modify how much confidence is needed for the sentence to be flagged as containing Stigma.
                 * @default 0.75
                 */
                threshold?: number;
                /** @default false */
                send_tokens?: boolean;
              };
              implicit_hate?: boolean | {
                /**
                 * @description Detects implicit hate.
                 * @default true
                 */
                input?: boolean;
                output?: boolean;
                /**
                 * @description The higher the number, the more confidence that the sentence contains implicit hate. The threshold allows you to modify how much confidence is needed for the sentence to be flagged as containing implicit hate.
                 * @default 0.75
                 */
                threshold?: number;
                /** @default false */
                send_tokens?: boolean;
              };
            };
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              id: string | null;
              model_id: string;
              /** Format: date-time */
              created_at: string;
              input_parameters?: {
                [key: string]: unknown;
              } | null;
              results: ({
                  input_text?: string | null;
                  generated_text: string;
                  generated_token_count: number;
                  input_token_count?: number | null;
                  /** @enum {string} */
                  stop_reason: "not_finished" | "max_tokens" | "eos_token" | "cancelled" | "time_limit" | "stop_sequence" | "token_limit" | "error";
                  stop_sequence?: string | null;
                  generated_tokens?: (({
                      text?: string | null;
                      logprob?: (number | null) | (string | null);
                      rank?: number | null;
                      top_tokens?: (({
                          text?: string | null;
                          logprob?: (number | null) | (string | null);
                        })[]) | null;
                    })[]) | null;
                  input_tokens?: (({
                      text?: string | null;
                      logprob?: (number | null) | (string | null);
                      rank?: number | null;
                      top_tokens?: (({
                          text?: string | null;
                          logprob?: (number | null) | (string | null);
                        })[]) | null;
                    })[]) | null;
                  seed?: number | null;
                  moderation?: {
                    [key: string]: unknown;
                  } | null;
                  [key: string]: unknown;
                })[];
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/text/chat_stream": {
    post: {
      parameters: {
        query: {
          version: "2024-01-10";
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            model_id?: string;
            prompt_template_id?: string | null;
            moderations?: {
              hap?: boolean | {
                input?: boolean;
                output?: boolean;
                threshold?: number;
                send_tokens?: boolean;
              };
              stigma?: boolean | {
                input?: boolean;
                output?: boolean;
                threshold?: number;
                send_tokens?: boolean;
              };
              implicit_hate?: boolean | {
                input?: boolean;
                output?: boolean;
                threshold?: number;
                send_tokens?: boolean;
              };
            };
            messages?: ({
                /** @enum {string} */
                role: "user" | "system" | "assistant";
                content: string;
                file_ids?: string[];
              })[];
            conversation_id?: string | null;
            parent_id?: string | null;
            prompt_id?: string;
            /** @enum {string} */
            trim_method?: "floating_window" | "none";
            use_conversation_parameters?: boolean;
            parameters?: ({
              beam_width?: number | null;
              /** @enum {string|null} */
              decoding_method?: "greedy" | "sample" | null;
              max_new_tokens?: number | null;
              min_new_tokens?: number | null;
              random_seed?: number | null;
              stop_sequences?: string[] | null;
              temperature?: number | null;
              time_limit?: number | null;
              top_k?: number | null;
              top_p?: number | null;
              typical_p?: number | null;
              repetition_penalty?: number | null;
              truncate_input_tokens?: number | null;
              include_stop_sequence?: boolean;
              return_options?: ({
                generated_tokens?: boolean | null;
                input_text?: boolean | null;
                input_tokens?: boolean | null;
                input_parameters?: boolean | null;
                token_logprobs?: boolean | null;
                token_ranks?: boolean | null;
                top_n_tokens?: number | null;
              }) | null;
              length_penalty?: ({
                decay_factor?: number | null;
                start_index?: number | null;
              }) | null;
            }) | null;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "text/event-stream": {
              id?: string | null;
              model_id?: string;
              /** Format: date-time */
              created_at?: string;
              input_parameters?: {
                [key: string]: unknown;
              } | null;
              results?: ({
                  input_text?: string | null;
                  generated_text: string;
                  generated_token_count: number;
                  input_token_count?: number | null;
                  /** @enum {string} */
                  stop_reason: "not_finished" | "max_tokens" | "eos_token" | "cancelled" | "time_limit" | "stop_sequence" | "token_limit" | "error";
                  stop_sequence?: string | null;
                  generated_tokens?: (({
                      text?: string | null;
                      logprob?: (number | null) | (string | null);
                      rank?: number | null;
                      top_tokens?: (({
                          text?: string | null;
                          logprob?: (number | null) | (string | null);
                        })[]) | null;
                    })[]) | null;
                  input_tokens?: (({
                      text?: string | null;
                      logprob?: (number | null) | (string | null);
                      rank?: number | null;
                      top_tokens?: (({
                          text?: string | null;
                          logprob?: (number | null) | (string | null);
                        })[]) | null;
                    })[]) | null;
                  seed?: number | null;
                  [key: string]: unknown;
                })[];
              moderation?: {
                hap?: {
                    success: boolean;
                    score: number;
                    flagged: boolean;
                    position: {
                      start: number;
                      end: number;
                    };
                    tokens?: {
                        token?: string;
                        index?: number;
                        score?: number;
                      }[];
                  }[];
                stigma?: {
                    success: boolean;
                    score: number;
                    flagged: boolean;
                    position: {
                      start: number;
                      end: number;
                    };
                    tokens?: {
                        token?: string;
                        index?: number;
                        score?: number;
                      }[];
                  }[];
                implicit_hate?: {
                    success: boolean;
                    score: number;
                    flagged: boolean;
                    position: {
                      start: number;
                      end: number;
                    };
                    tokens?: {
                        token?: string;
                        index?: number;
                        score?: number;
                      }[];
                  }[];
              };
              conversation_id: string;
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/text/chat/output": {
    post: {
      parameters: {
        query: {
          version: "2024-01-10";
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            model_id?: string;
            prompt_template_id?: string | null;
            moderations?: {
              hap?: boolean | {
                input?: boolean;
                output?: boolean;
                threshold?: number;
                send_tokens?: boolean;
              };
              stigma?: boolean | {
                input?: boolean;
                output?: boolean;
                threshold?: number;
                send_tokens?: boolean;
              };
              implicit_hate?: boolean | {
                input?: boolean;
                output?: boolean;
                threshold?: number;
                send_tokens?: boolean;
              };
            };
            messages?: ({
                /** @enum {string} */
                role: "user" | "system" | "assistant";
                content: string;
                file_ids?: string[];
              })[];
            conversation_id?: string | null;
            parent_id?: string | null;
            prompt_id?: string;
            /** @enum {string} */
            trim_method?: "floating_window" | "none";
            use_conversation_parameters?: boolean;
            parameters?: ({
              beam_width?: number | null;
              /** @enum {string|null} */
              decoding_method?: "greedy" | "sample" | null;
              max_new_tokens?: number | null;
              min_new_tokens?: number | null;
              random_seed?: number | null;
              stop_sequences?: string[] | null;
              temperature?: number | null;
              time_limit?: number | null;
              top_k?: number | null;
              top_p?: number | null;
              typical_p?: number | null;
              repetition_penalty?: number | null;
              truncate_input_tokens?: number | null;
              include_stop_sequence?: boolean;
              return_options?: ({
                generated_tokens?: boolean | null;
                input_text?: boolean | null;
                input_tokens?: boolean | null;
                input_parameters?: boolean | null;
                token_logprobs?: boolean | null;
                token_ranks?: boolean | null;
                top_n_tokens?: number | null;
              }) | null;
              length_penalty?: ({
                decay_factor?: number | null;
                start_index?: number | null;
              }) | null;
            }) | null;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: string;
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/text/chat": {
    post: {
      parameters: {
        query: {
          version: "2024-01-10";
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            model_id?: string;
            prompt_template_id?: string | null;
            moderations?: {
              hap?: boolean | {
                input?: boolean;
                output?: boolean;
                threshold?: number;
                send_tokens?: boolean;
              };
              stigma?: boolean | {
                input?: boolean;
                output?: boolean;
                threshold?: number;
                send_tokens?: boolean;
              };
              implicit_hate?: boolean | {
                input?: boolean;
                output?: boolean;
                threshold?: number;
                send_tokens?: boolean;
              };
            };
            messages?: ({
                /** @enum {string} */
                role: "user" | "system" | "assistant";
                content: string;
                file_ids?: string[];
              })[];
            conversation_id?: string | null;
            parent_id?: string | null;
            prompt_id?: string;
            /** @enum {string} */
            trim_method?: "floating_window" | "none";
            use_conversation_parameters?: boolean;
            parameters?: ({
              beam_width?: number | null;
              /** @enum {string|null} */
              decoding_method?: "greedy" | "sample" | null;
              max_new_tokens?: number | null;
              min_new_tokens?: number | null;
              random_seed?: number | null;
              stop_sequences?: string[] | null;
              temperature?: number | null;
              time_limit?: number | null;
              top_k?: number | null;
              top_p?: number | null;
              typical_p?: number | null;
              repetition_penalty?: number | null;
              truncate_input_tokens?: number | null;
              include_stop_sequence?: boolean;
              return_options?: ({
                generated_tokens?: boolean | null;
                input_text?: boolean | null;
                input_tokens?: boolean | null;
                input_parameters?: boolean | null;
                token_logprobs?: boolean | null;
                token_ranks?: boolean | null;
                top_n_tokens?: number | null;
              }) | null;
              length_penalty?: ({
                decay_factor?: number | null;
                start_index?: number | null;
              }) | null;
            }) | null;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              id?: string | null;
              model_id?: string;
              /** Format: date-time */
              created_at?: string;
              input_parameters?: {
                [key: string]: unknown;
              } | null;
              results: ({
                  input_text?: string | null;
                  generated_text: string;
                  generated_token_count: number;
                  input_token_count?: number | null;
                  /** @enum {string} */
                  stop_reason: "not_finished" | "max_tokens" | "eos_token" | "cancelled" | "time_limit" | "stop_sequence" | "token_limit" | "error";
                  stop_sequence?: string | null;
                  generated_tokens?: (({
                      text?: string | null;
                      logprob?: (number | null) | (string | null);
                      rank?: number | null;
                      top_tokens?: (({
                          text?: string | null;
                          logprob?: (number | null) | (string | null);
                        })[]) | null;
                    })[]) | null;
                  input_tokens?: (({
                      text?: string | null;
                      logprob?: (number | null) | (string | null);
                      rank?: number | null;
                      top_tokens?: (({
                          text?: string | null;
                          logprob?: (number | null) | (string | null);
                        })[]) | null;
                    })[]) | null;
                  seed?: number | null;
                  moderation?: {
                    [key: string]: unknown;
                  } | null;
                  [key: string]: unknown;
                })[];
              conversation_id: string;
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/prompts/{id}": {
    get: {
      parameters: {
        query: {
          version: "2024-01-10";
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                id: string;
                name: string;
                description?: string;
                data?: Record<string, never>;
                input?: string;
                output?: string;
                model_id?: string;
                parameters?: ({
                  beam_width?: number | null;
                  /** @enum {string|null} */
                  decoding_method?: "greedy" | "sample" | null;
                  max_new_tokens?: number | null;
                  min_new_tokens?: number | null;
                  random_seed?: number | null;
                  stop_sequences?: string[] | null;
                  temperature?: number | null;
                  time_limit?: number | null;
                  top_k?: number | null;
                  top_p?: number | null;
                  typical_p?: number | null;
                  repetition_penalty?: number | null;
                  truncate_input_tokens?: number | null;
                  include_stop_sequence?: boolean;
                  return_options?: ({
                    generated_tokens?: boolean | null;
                    input_text?: boolean | null;
                    input_tokens?: boolean | null;
                    input_parameters?: boolean | null;
                    token_logprobs?: boolean | null;
                    token_ranks?: boolean | null;
                    top_n_tokens?: number | null;
                  }) | null;
                  length_penalty?: ({
                    decay_factor?: number | null;
                    start_index?: number | null;
                  }) | null;
                }) | null;
                moderations?: ({
                  hap?: boolean | {
                    input?: boolean;
                    output?: boolean;
                    threshold?: number;
                    send_tokens?: boolean;
                  };
                  stigma?: boolean | {
                    input?: boolean;
                    output?: boolean;
                    threshold?: number;
                    send_tokens?: boolean;
                  };
                  implicit_hate?: boolean | {
                    input?: boolean;
                    output?: boolean;
                    threshold?: number;
                    send_tokens?: boolean;
                  };
                }) | null;
                /** Format: date-time */
                created_at: string;
                /** Format: date-time */
                updated_at?: string;
                /** @enum {string} */
                type: "private" | "public" | "community" | "example";
                public?: boolean;
                prompt_id?: string | null;
                metadata?: {
                  [key: string]: unknown;
                };
                tags?: ({
                    id: string;
                    name: string;
                    /** @enum {string} */
                    type: "language" | "industry" | "model_type";
                  })[];
                author?: {
                  id?: number;
                  first_name?: string;
                  last_name?: string;
                };
                task?: {
                  id?: string;
                  name?: string;
                  icon?: string;
                };
                messages?: (({
                    /** @enum {string} */
                    role: "user" | "system" | "assistant";
                    content: string;
                    file_ids?: string[];
                  })[]) | null;
                folder_id?: string | null;
                usage_count: number;
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
    put: {
      parameters: {
        query: {
          version: "2024-01-10";
        };
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            description?: string;
            prompt_id?: string;
            data?: {
              example_file_ids?: string[];
              [key: string]: unknown;
            };
            output?: string | null;
            parameters?: ({
              beam_width?: number | null;
              /** @enum {string|null} */
              decoding_method?: "greedy" | "sample" | null;
              max_new_tokens?: number | null;
              min_new_tokens?: number | null;
              random_seed?: number | null;
              stop_sequences?: string[] | null;
              temperature?: number | null;
              time_limit?: number | null;
              top_k?: number | null;
              top_p?: number | null;
              typical_p?: number | null;
              repetition_penalty?: number | null;
              truncate_input_tokens?: number | null;
              include_stop_sequence?: boolean;
              return_options?: ({
                generated_tokens?: boolean | null;
                input_text?: boolean | null;
                input_tokens?: boolean | null;
                input_parameters?: boolean | null;
                token_logprobs?: boolean | null;
                token_ranks?: boolean | null;
                top_n_tokens?: number | null;
              }) | null;
              length_penalty?: ({
                decay_factor?: number | null;
                start_index?: number | null;
              }) | null;
            }) | null;
            moderations?: {
              hap?: boolean | {
                input?: boolean;
                output?: boolean;
                threshold?: number;
                send_tokens?: boolean;
              };
              stigma?: boolean | {
                input?: boolean;
                output?: boolean;
                threshold?: number;
                send_tokens?: boolean;
              };
              implicit_hate?: boolean | {
                input?: boolean;
                output?: boolean;
                threshold?: number;
                send_tokens?: boolean;
              };
            };
            model_id: string;
            task_id?: string;
            folder_id?: string | null;
            industry_id?: string;
            language_id?: string;
            /** @enum {string} */
            type?: "private" | "public" | "community";
            input?: string;
            messages?: (({
                /** @enum {string} */
                role: "user" | "system" | "assistant";
                content: string;
                file_ids?: string[];
              })[]) | null;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                id: string;
                name: string;
                description?: string;
                data?: Record<string, never>;
                input?: string;
                output?: string;
                model_id?: string;
                parameters?: ({
                  beam_width?: number | null;
                  /** @enum {string|null} */
                  decoding_method?: "greedy" | "sample" | null;
                  max_new_tokens?: number | null;
                  min_new_tokens?: number | null;
                  random_seed?: number | null;
                  stop_sequences?: string[] | null;
                  temperature?: number | null;
                  time_limit?: number | null;
                  top_k?: number | null;
                  top_p?: number | null;
                  typical_p?: number | null;
                  repetition_penalty?: number | null;
                  truncate_input_tokens?: number | null;
                  include_stop_sequence?: boolean;
                  return_options?: ({
                    generated_tokens?: boolean | null;
                    input_text?: boolean | null;
                    input_tokens?: boolean | null;
                    input_parameters?: boolean | null;
                    token_logprobs?: boolean | null;
                    token_ranks?: boolean | null;
                    top_n_tokens?: number | null;
                  }) | null;
                  length_penalty?: ({
                    decay_factor?: number | null;
                    start_index?: number | null;
                  }) | null;
                }) | null;
                moderations?: ({
                  hap?: boolean | {
                    input?: boolean;
                    output?: boolean;
                    threshold?: number;
                    send_tokens?: boolean;
                  };
                  stigma?: boolean | {
                    input?: boolean;
                    output?: boolean;
                    threshold?: number;
                    send_tokens?: boolean;
                  };
                  implicit_hate?: boolean | {
                    input?: boolean;
                    output?: boolean;
                    threshold?: number;
                    send_tokens?: boolean;
                  };
                }) | null;
                /** Format: date-time */
                created_at: string;
                /** Format: date-time */
                updated_at?: string;
                /** @enum {string} */
                type: "private" | "public" | "community" | "example";
                public?: boolean;
                prompt_id?: string | null;
                metadata?: {
                  [key: string]: unknown;
                };
                tags?: ({
                    id: string;
                    name: string;
                    /** @enum {string} */
                    type: "language" | "industry" | "model_type";
                  })[];
                author?: {
                  id?: number;
                  first_name?: string;
                  last_name?: string;
                };
                task?: {
                  id?: string;
                  name?: string;
                  icon?: string;
                };
                messages?: (({
                    /** @enum {string} */
                    role: "user" | "system" | "assistant";
                    content: string;
                    file_ids?: string[];
                  })[]) | null;
                folder_id?: string | null;
                usage_count: number;
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
    delete: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        204: {
          content: never;
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
    patch: {
      parameters: {
        query: {
          version: "2024-01-10";
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            /** @enum {string} */
            type?: "private" | "public" | "community";
            folder_id?: string | null;
            name?: string;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                id: string;
                name: string;
                description?: string;
                data?: Record<string, never>;
                input?: string;
                output?: string;
                model_id?: string;
                parameters?: ({
                  beam_width?: number | null;
                  /** @enum {string|null} */
                  decoding_method?: "greedy" | "sample" | null;
                  max_new_tokens?: number | null;
                  min_new_tokens?: number | null;
                  random_seed?: number | null;
                  stop_sequences?: string[] | null;
                  temperature?: number | null;
                  time_limit?: number | null;
                  top_k?: number | null;
                  top_p?: number | null;
                  typical_p?: number | null;
                  repetition_penalty?: number | null;
                  truncate_input_tokens?: number | null;
                  include_stop_sequence?: boolean;
                  return_options?: ({
                    generated_tokens?: boolean | null;
                    input_text?: boolean | null;
                    input_tokens?: boolean | null;
                    input_parameters?: boolean | null;
                    token_logprobs?: boolean | null;
                    token_ranks?: boolean | null;
                    top_n_tokens?: number | null;
                  }) | null;
                  length_penalty?: ({
                    decay_factor?: number | null;
                    start_index?: number | null;
                  }) | null;
                }) | null;
                moderations?: ({
                  hap?: boolean | {
                    input?: boolean;
                    output?: boolean;
                    threshold?: number;
                    send_tokens?: boolean;
                  };
                  stigma?: boolean | {
                    input?: boolean;
                    output?: boolean;
                    threshold?: number;
                    send_tokens?: boolean;
                  };
                  implicit_hate?: boolean | {
                    input?: boolean;
                    output?: boolean;
                    threshold?: number;
                    send_tokens?: boolean;
                  };
                }) | null;
                /** Format: date-time */
                created_at: string;
                /** Format: date-time */
                updated_at?: string;
                /** @enum {string} */
                type: "private" | "public" | "community" | "example";
                public?: boolean;
                prompt_id?: string | null;
                metadata?: {
                  [key: string]: unknown;
                };
                tags?: ({
                    id: string;
                    name: string;
                    /** @enum {string} */
                    type: "language" | "industry" | "model_type";
                  })[];
                author?: {
                  id?: number;
                  first_name?: string;
                  last_name?: string;
                };
                task?: {
                  id?: string;
                  name?: string;
                  icon?: string;
                };
                messages?: (({
                    /** @enum {string} */
                    role: "user" | "system" | "assistant";
                    content: string;
                    file_ids?: string[];
                  })[]) | null;
                folder_id?: string | null;
                usage_count: number;
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/prompts": {
    get: {
      parameters: {
        query: {
          limit?: number;
          offset?: number;
          sort_by?: "type" | "model_task" | "updated_at" | "created_at" | "name" | "id" | "model" | "usage_count";
          direction?: "asc" | "desc";
          search?: string;
          task_id?: string | string[];
          model_id?: string | string[];
          source?: ("user" | "example" | "community") | (("user" | "example" | "community")[]);
          model_family_id?: number;
          industry_id?: string | string[];
          prompt_language_id?: string | string[];
          model_type_id?: string | string[];
          avg_time_min?: number;
          avg_time_max?: number;
          context_window_min?: number;
          context_window_max?: number;
          folder_id?: string | null;
          version: "2024-01-10";
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              results: ({
                  id: string;
                  name: string;
                  description?: string;
                  data?: Record<string, never>;
                  input?: string;
                  output?: string;
                  model_id?: string;
                  parameters?: ({
                    beam_width?: number | null;
                    /** @enum {string|null} */
                    decoding_method?: "greedy" | "sample" | null;
                    max_new_tokens?: number | null;
                    min_new_tokens?: number | null;
                    random_seed?: number | null;
                    stop_sequences?: string[] | null;
                    temperature?: number | null;
                    time_limit?: number | null;
                    top_k?: number | null;
                    top_p?: number | null;
                    typical_p?: number | null;
                    repetition_penalty?: number | null;
                    truncate_input_tokens?: number | null;
                    include_stop_sequence?: boolean;
                    return_options?: ({
                      generated_tokens?: boolean | null;
                      input_text?: boolean | null;
                      input_tokens?: boolean | null;
                      input_parameters?: boolean | null;
                      token_logprobs?: boolean | null;
                      token_ranks?: boolean | null;
                      top_n_tokens?: number | null;
                    }) | null;
                    length_penalty?: ({
                      decay_factor?: number | null;
                      start_index?: number | null;
                    }) | null;
                  }) | null;
                  moderations?: ({
                    hap?: boolean | {
                      input?: boolean;
                      output?: boolean;
                      threshold?: number;
                      send_tokens?: boolean;
                    };
                    stigma?: boolean | {
                      input?: boolean;
                      output?: boolean;
                      threshold?: number;
                      send_tokens?: boolean;
                    };
                    implicit_hate?: boolean | {
                      input?: boolean;
                      output?: boolean;
                      threshold?: number;
                      send_tokens?: boolean;
                    };
                  }) | null;
                  /** Format: date-time */
                  created_at: string;
                  /** Format: date-time */
                  updated_at?: string;
                  /** @enum {string} */
                  type: "private" | "public" | "community" | "example";
                  public?: boolean;
                  prompt_id?: string | null;
                  metadata?: {
                    [key: string]: unknown;
                  };
                  tags?: ({
                      id: string;
                      name: string;
                      /** @enum {string} */
                      type: "language" | "industry" | "model_type";
                    })[];
                  author?: {
                    id?: number;
                    first_name?: string;
                    last_name?: string;
                  };
                  task?: {
                    id?: string;
                    name?: string;
                    icon?: string;
                  };
                  messages?: (({
                      /** @enum {string} */
                      role: "user" | "system" | "assistant";
                      content: string;
                      file_ids?: string[];
                    })[]) | null;
                  folder_id?: string | null;
                  usage_count: number;
                })[];
              total_count: number;
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
    post: {
      parameters: {
        query: {
          version: "2024-01-10";
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            description?: string;
            prompt_id?: string;
            data?: {
              example_file_ids?: string[];
              [key: string]: unknown;
            };
            output?: string | null;
            parameters?: ({
              beam_width?: number | null;
              /** @enum {string|null} */
              decoding_method?: "greedy" | "sample" | null;
              max_new_tokens?: number | null;
              min_new_tokens?: number | null;
              random_seed?: number | null;
              stop_sequences?: string[] | null;
              temperature?: number | null;
              time_limit?: number | null;
              top_k?: number | null;
              top_p?: number | null;
              typical_p?: number | null;
              repetition_penalty?: number | null;
              truncate_input_tokens?: number | null;
              include_stop_sequence?: boolean;
              return_options?: ({
                generated_tokens?: boolean | null;
                input_text?: boolean | null;
                input_tokens?: boolean | null;
                input_parameters?: boolean | null;
                token_logprobs?: boolean | null;
                token_ranks?: boolean | null;
                top_n_tokens?: number | null;
              }) | null;
              length_penalty?: ({
                decay_factor?: number | null;
                start_index?: number | null;
              }) | null;
            }) | null;
            moderations?: {
              hap?: boolean | {
                input?: boolean;
                output?: boolean;
                threshold?: number;
                send_tokens?: boolean;
              };
              stigma?: boolean | {
                input?: boolean;
                output?: boolean;
                threshold?: number;
                send_tokens?: boolean;
              };
              implicit_hate?: boolean | {
                input?: boolean;
                output?: boolean;
                threshold?: number;
                send_tokens?: boolean;
              };
            };
            model_id: string;
            task_id?: string;
            folder_id?: string | null;
            industry_id?: string;
            language_id?: string;
            /** @enum {string} */
            type?: "private" | "public" | "community";
            input?: string;
            messages?: (({
                /** @enum {string} */
                role: "user" | "system" | "assistant";
                content: string;
                file_ids?: string[];
              })[]) | null;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                id: string;
                name: string;
                description?: string;
                data?: Record<string, never>;
                input?: string;
                output?: string;
                model_id?: string;
                parameters?: ({
                  beam_width?: number | null;
                  /** @enum {string|null} */
                  decoding_method?: "greedy" | "sample" | null;
                  max_new_tokens?: number | null;
                  min_new_tokens?: number | null;
                  random_seed?: number | null;
                  stop_sequences?: string[] | null;
                  temperature?: number | null;
                  time_limit?: number | null;
                  top_k?: number | null;
                  top_p?: number | null;
                  typical_p?: number | null;
                  repetition_penalty?: number | null;
                  truncate_input_tokens?: number | null;
                  include_stop_sequence?: boolean;
                  return_options?: ({
                    generated_tokens?: boolean | null;
                    input_text?: boolean | null;
                    input_tokens?: boolean | null;
                    input_parameters?: boolean | null;
                    token_logprobs?: boolean | null;
                    token_ranks?: boolean | null;
                    top_n_tokens?: number | null;
                  }) | null;
                  length_penalty?: ({
                    decay_factor?: number | null;
                    start_index?: number | null;
                  }) | null;
                }) | null;
                moderations?: ({
                  hap?: boolean | {
                    input?: boolean;
                    output?: boolean;
                    threshold?: number;
                    send_tokens?: boolean;
                  };
                  stigma?: boolean | {
                    input?: boolean;
                    output?: boolean;
                    threshold?: number;
                    send_tokens?: boolean;
                  };
                  implicit_hate?: boolean | {
                    input?: boolean;
                    output?: boolean;
                    threshold?: number;
                    send_tokens?: boolean;
                  };
                }) | null;
                /** Format: date-time */
                created_at: string;
                /** Format: date-time */
                updated_at?: string;
                /** @enum {string} */
                type: "private" | "public" | "community" | "example";
                public?: boolean;
                prompt_id?: string | null;
                metadata?: {
                  [key: string]: unknown;
                };
                tags?: ({
                    id: string;
                    name: string;
                    /** @enum {string} */
                    type: "language" | "industry" | "model_type";
                  })[];
                author?: {
                  id?: number;
                  first_name?: string;
                  last_name?: string;
                };
                task?: {
                  id?: string;
                  name?: string;
                  icon?: string;
                };
                messages?: (({
                    /** @enum {string} */
                    role: "user" | "system" | "assistant";
                    content: string;
                    file_ids?: string[];
                  })[]) | null;
                folder_id?: string | null;
                usage_count: number;
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/folders/{id}": {
    get: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                id: string;
                name: string;
                /** Format: date-time */
                created_at: string;
                prompt_ids?: string[];
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
    put: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                id: string;
                name: string;
                /** Format: date-time */
                created_at: string;
                prompt_ids?: string[];
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
    delete: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        204: {
          content: never;
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
    patch: {
      parameters: {
        query: {
          version: "2024-01-10";
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            position?: number;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                id: string;
                name: string;
                /** Format: date-time */
                created_at: string;
                prompt_ids?: string[];
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/tunes/{id}/content/{type}": {
    get: {
      parameters: {
        query: {
          version: "2023-12-15";
        };
        path: {
          id: string;
          type: "vectors" | "logs" | "export";
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/octet-stream": Blob;
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/files/{id}": {
    get: {
      parameters: {
        query: {
          version: "2023-12-15";
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                id: string;
                bytes: number;
                file_name: string;
                /** @enum {string} */
                storage_provider_location: "us-south" | "us-east";
                /** @enum {string} */
                purpose: "tune" | "template" | "tune_import" | "extraction";
                /** Format: date-time */
                created_at: string;
                file_formats?: {
                    id: number;
                    name: string;
                  }[];
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
    delete: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        204: {
          content: never;
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/files": {
    get: {
      parameters: {
        query: {
          limit?: number;
          offset?: number;
          sort_by?: "name" | "created_at";
          direction?: "asc" | "desc";
          search?: string;
          purpose?: "tune" | "template" | "tune_import" | "extraction";
          format_id?: number;
          version: "2023-12-15";
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              results: ({
                  id: string;
                  bytes: number;
                  file_name: string;
                  /** @enum {string} */
                  storage_provider_location: "us-south" | "us-east";
                  /** @enum {string} */
                  purpose: "tune" | "template" | "tune_import" | "extraction";
                  /** Format: date-time */
                  created_at: string;
                  file_formats?: {
                      id: number;
                      name: string;
                    }[];
                })[];
              total_count: number;
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
    post: {
      parameters: {
        query: {
          version: "2023-12-15";
        };
      };
      requestBody: {
        content: {
          "multipart/form-data": {
            /** @enum {string} */
            purpose: "tune" | "template" | "tune_import" | "extraction";
            /** Format: binary */
            file: Blob;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                id: string;
                bytes: number;
                file_name: string;
                /** @enum {string} */
                storage_provider_location: "us-south" | "us-east";
                /** @enum {string} */
                purpose: "tune" | "template" | "tune_import" | "extraction";
                /** Format: date-time */
                created_at: string;
                file_formats?: {
                    id: number;
                    name: string;
                  }[];
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/user": {
    get: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                id: number;
                first_name?: string;
                last_name?: string;
                tou_accepted: boolean;
                tou_accepted_at?: string;
                generate_default?: ({
                  model_id?: string;
                  prompt_id?: string;
                  template?: {
                    id?: string;
                    value?: string;
                    data: {
                      example_file_ids?: string[];
                      [key: string]: unknown;
                    };
                  };
                  parameters?: ({
                    beam_width?: number | null;
                    /** @enum {string|null} */
                    decoding_method?: "greedy" | "sample" | null;
                    max_new_tokens?: number | null;
                    min_new_tokens?: number | null;
                    random_seed?: number | null;
                    stop_sequences?: string[] | null;
                    temperature?: number | null;
                    time_limit?: number | null;
                    top_k?: number | null;
                    top_p?: number | null;
                    typical_p?: number | null;
                    repetition_penalty?: number | null;
                    truncate_input_tokens?: number | null;
                    include_stop_sequence?: boolean;
                    return_options?: ({
                      generated_tokens?: boolean | null;
                      input_text?: boolean | null;
                      input_tokens?: boolean | null;
                      input_parameters?: boolean | null;
                      token_logprobs?: boolean | null;
                      token_ranks?: boolean | null;
                      top_n_tokens?: number | null;
                    }) | null;
                    length_penalty?: ({
                      decay_factor?: number | null;
                      start_index?: number | null;
                    }) | null;
                  }) | null;
                  moderations?: {
                    hap?: boolean | {
                      input?: boolean;
                      output?: boolean;
                      threshold?: number;
                      send_tokens?: boolean;
                    };
                    stigma?: boolean | {
                      input?: boolean;
                      output?: boolean;
                      threshold?: number;
                      send_tokens?: boolean;
                    };
                    implicit_hate?: boolean | {
                      input?: boolean;
                      output?: boolean;
                      threshold?: number;
                      send_tokens?: boolean;
                    };
                  };
                }) | null;
                data_usage_consent: boolean;
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
    post: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            first_name?: string;
            last_name?: string;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                user_id: string;
                api_key: {
                  value: string;
                  created_at: string;
                  generated_at: string;
                  last_used_at?: string;
                };
                id: number;
                first_name?: string;
                last_name?: string;
                tou_accepted: boolean;
                tou_accepted_at?: string;
                generate_default?: ({
                  model_id?: string;
                  prompt_id?: string;
                  template?: {
                    id?: string;
                    value?: string;
                    data: {
                      example_file_ids?: string[];
                      [key: string]: unknown;
                    };
                  };
                  parameters?: ({
                    beam_width?: number | null;
                    /** @enum {string|null} */
                    decoding_method?: "greedy" | "sample" | null;
                    max_new_tokens?: number | null;
                    min_new_tokens?: number | null;
                    random_seed?: number | null;
                    stop_sequences?: string[] | null;
                    temperature?: number | null;
                    time_limit?: number | null;
                    top_k?: number | null;
                    top_p?: number | null;
                    typical_p?: number | null;
                    repetition_penalty?: number | null;
                    truncate_input_tokens?: number | null;
                    include_stop_sequence?: boolean;
                    return_options?: ({
                      generated_tokens?: boolean | null;
                      input_text?: boolean | null;
                      input_tokens?: boolean | null;
                      input_parameters?: boolean | null;
                      token_logprobs?: boolean | null;
                      token_ranks?: boolean | null;
                      top_n_tokens?: number | null;
                    }) | null;
                    length_penalty?: ({
                      decay_factor?: number | null;
                      start_index?: number | null;
                    }) | null;
                  }) | null;
                  moderations?: {
                    hap?: boolean | {
                      input?: boolean;
                      output?: boolean;
                      threshold?: number;
                      send_tokens?: boolean;
                    };
                    stigma?: boolean | {
                      input?: boolean;
                      output?: boolean;
                      threshold?: number;
                      send_tokens?: boolean;
                    };
                    implicit_hate?: boolean | {
                      input?: boolean;
                      output?: boolean;
                      threshold?: number;
                      send_tokens?: boolean;
                    };
                  };
                }) | null;
                data_usage_consent: boolean;
                [key: string]: unknown;
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
    delete: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
      };
      responses: {
        /** @description Success */
        204: {
          content: never;
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
    patch: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            tou_accepted?: boolean;
            data_usage_consent?: boolean;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                id: number;
                first_name?: string;
                last_name?: string;
                tou_accepted: boolean;
                tou_accepted_at?: string;
                generate_default?: ({
                  model_id?: string;
                  prompt_id?: string;
                  template?: {
                    id?: string;
                    value?: string;
                    data: {
                      example_file_ids?: string[];
                      [key: string]: unknown;
                    };
                  };
                  parameters?: ({
                    beam_width?: number | null;
                    /** @enum {string|null} */
                    decoding_method?: "greedy" | "sample" | null;
                    max_new_tokens?: number | null;
                    min_new_tokens?: number | null;
                    random_seed?: number | null;
                    stop_sequences?: string[] | null;
                    temperature?: number | null;
                    time_limit?: number | null;
                    top_k?: number | null;
                    top_p?: number | null;
                    typical_p?: number | null;
                    repetition_penalty?: number | null;
                    truncate_input_tokens?: number | null;
                    include_stop_sequence?: boolean;
                    return_options?: ({
                      generated_tokens?: boolean | null;
                      input_text?: boolean | null;
                      input_tokens?: boolean | null;
                      input_parameters?: boolean | null;
                      token_logprobs?: boolean | null;
                      token_ranks?: boolean | null;
                      top_n_tokens?: number | null;
                    }) | null;
                    length_penalty?: ({
                      decay_factor?: number | null;
                      start_index?: number | null;
                    }) | null;
                  }) | null;
                  moderations?: {
                    hap?: boolean | {
                      input?: boolean;
                      output?: boolean;
                      threshold?: number;
                      send_tokens?: boolean;
                    };
                    stigma?: boolean | {
                      input?: boolean;
                      output?: boolean;
                      threshold?: number;
                      send_tokens?: boolean;
                    };
                    implicit_hate?: boolean | {
                      input?: boolean;
                      output?: boolean;
                      threshold?: number;
                      send_tokens?: boolean;
                    };
                  };
                }) | null;
                data_usage_consent: boolean;
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/tunes/{id}": {
    get: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                id: string;
                name: string;
                model_id: string;
                model_name: string | null;
                /** @enum {string} */
                status: "initializing" | "not_started" | "pending" | "halted" | "running" | "queued" | "completed" | "failed";
                status_message?: string | null;
                tuning_type: string;
                parameters?: Record<string, never>;
                preferred: boolean;
                task_id: string;
                task_name: string;
                /** Format: date-time */
                started_at?: string | null;
                /** Format: date-time */
                finished_at?: string | null;
                /** Format: date-time */
                created_at: string;
                validation_files?: {
                    id: string;
                    file_name: string;
                    /** Format: date-time */
                    created_at?: string;
                  }[] | null;
                training_files?: {
                    id: string;
                    file_name: string;
                    /** Format: date-time */
                    created_at?: string;
                  }[] | null;
                evaluation_files?: {
                    id: string;
                    file_name: string;
                    /** Format: date-time */
                    created_at?: string;
                  }[] | null;
                datapoints?: {
                  loss: {
                      data: {
                        value: number;
                        step?: number;
                        epoch: number;
                      };
                      /** Format: date-time */
                      timestamp: string;
                    }[];
                };
                vectors?: string | null;
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
    delete: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        204: {
          content: never;
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
    patch: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            name?: string;
            preferred?: boolean;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                id: string;
                name: string;
                model_id: string;
                model_name: string | null;
                /** @enum {string} */
                status: "initializing" | "not_started" | "pending" | "halted" | "running" | "queued" | "completed" | "failed";
                status_message?: string | null;
                tuning_type: string;
                parameters?: Record<string, never>;
                preferred: boolean;
                task_id: string;
                task_name: string;
                /** Format: date-time */
                started_at?: string | null;
                /** Format: date-time */
                finished_at?: string | null;
                /** Format: date-time */
                created_at: string;
                validation_files?: {
                    id: string;
                    file_name: string;
                    /** Format: date-time */
                    created_at?: string;
                  }[] | null;
                training_files?: {
                    id: string;
                    file_name: string;
                    /** Format: date-time */
                    created_at?: string;
                  }[] | null;
                evaluation_files?: {
                    id: string;
                    file_name: string;
                    /** Format: date-time */
                    created_at?: string;
                  }[] | null;
                datapoints?: {
                  loss: {
                      data: {
                        value: number;
                        step?: number;
                        epoch: number;
                      };
                      /** Format: date-time */
                      timestamp: string;
                    }[];
                };
                vectors?: string | null;
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/tunes/import": {
    post: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            file_id: string;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                id: string;
                name: string;
                model_id: string;
                model_name: string | null;
                /** @enum {string} */
                status: "initializing" | "not_started" | "pending" | "halted" | "running" | "queued" | "completed" | "failed";
                status_message?: string | null;
                tuning_type: string;
                parameters?: Record<string, never>;
                preferred: boolean;
                task_id: string;
                task_name: string;
                /** Format: date-time */
                started_at?: string | null;
                /** Format: date-time */
                finished_at?: string | null;
                /** Format: date-time */
                created_at: string;
                validation_files?: {
                    id: string;
                    file_name: string;
                    /** Format: date-time */
                    created_at?: string;
                  }[] | null;
                training_files?: {
                    id: string;
                    file_name: string;
                    /** Format: date-time */
                    created_at?: string;
                  }[] | null;
                evaluation_files?: {
                    id: string;
                    file_name: string;
                    /** Format: date-time */
                    created_at?: string;
                  }[] | null;
                datapoints?: {
                  loss: {
                      data: {
                        value: number;
                        step?: number;
                        epoch: number;
                      };
                      /** Format: date-time */
                      timestamp: string;
                    }[];
                };
                vectors?: string | null;
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/tunes": {
    get: {
      parameters: {
        query: {
          limit?: number;
          offset?: number;
          status?: "initializing" | "not_started" | "pending" | "halted" | "running" | "queued" | "completed" | "failed";
          search?: string | null;
          sort_by?: "status" | "created_at" | "name" | "id" | "model";
          direction?: "asc" | "desc";
          version: "2023-11-22";
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              total_count: number;
              results: ({
                  id: string;
                  name: string;
                  model_id: string;
                  model_name: string | null;
                  /** @enum {string} */
                  status: "initializing" | "not_started" | "pending" | "halted" | "running" | "queued" | "completed" | "failed";
                  status_message?: string | null;
                  tuning_type: string;
                  parameters?: Record<string, never>;
                  preferred: boolean;
                  task_id: string;
                  task_name: string;
                  /** Format: date-time */
                  started_at?: string | null;
                  /** Format: date-time */
                  finished_at?: string | null;
                  /** Format: date-time */
                  created_at: string;
                  validation_files?: {
                      id: string;
                      file_name: string;
                      /** Format: date-time */
                      created_at?: string;
                    }[] | null;
                  training_files?: {
                      id: string;
                      file_name: string;
                      /** Format: date-time */
                      created_at?: string;
                    }[] | null;
                  evaluation_files?: {
                      id: string;
                      file_name: string;
                      /** Format: date-time */
                      created_at?: string;
                    }[] | null;
                  datapoints?: {
                    loss: {
                        data: {
                          value: number;
                          step?: number;
                          epoch: number;
                        };
                        /** Format: date-time */
                        timestamp: string;
                      }[];
                  };
                  vectors?: string | null;
                })[];
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
    post: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            model_id: string;
            task_id: string;
            training_file_ids: string[];
            validation_file_ids?: string[] | null;
            evaluation_file_ids?: string[] | null;
            tuning_type: string;
            parameters?: ({
              batch_size?: number | null;
              num_epochs?: number | null;
              verbalizer?: string | null;
              learning_rate?: number | null;
              accumulate_steps?: number | null;
              max_input_tokens?: number | null;
              max_output_tokens?: number | null;
              num_virtual_tokens?: number | null;
              [key: string]: unknown;
            }) | null;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                id: string;
                name: string;
                model_id: string;
                model_name: string | null;
                /** @enum {string} */
                status: "initializing" | "not_started" | "pending" | "halted" | "running" | "queued" | "completed" | "failed";
                status_message?: string | null;
                tuning_type: string;
                parameters?: Record<string, never>;
                preferred: boolean;
                task_id: string;
                task_name: string;
                /** Format: date-time */
                started_at?: string | null;
                /** Format: date-time */
                finished_at?: string | null;
                /** Format: date-time */
                created_at: string;
                validation_files?: {
                    id: string;
                    file_name: string;
                    /** Format: date-time */
                    created_at?: string;
                  }[] | null;
                training_files?: {
                    id: string;
                    file_name: string;
                    /** Format: date-time */
                    created_at?: string;
                  }[] | null;
                evaluation_files?: {
                    id: string;
                    file_name: string;
                    /** Format: date-time */
                    created_at?: string;
                  }[] | null;
                datapoints?: {
                  loss: {
                      data: {
                        value: number;
                        step?: number;
                        epoch: number;
                      };
                      /** Format: date-time */
                      timestamp: string;
                    }[];
                };
                vectors?: string | null;
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/text/moderations": {
    post: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
      };
      requestBody: {
        content: {
          "application/json": {
            input: string;
            hap?: {
              /** @default 0.75 */
              threshold?: number;
              /** @default false */
              send_tokens?: boolean;
            };
            stigma?: {
              /** @default 0.75 */
              threshold?: number;
              /** @default false */
              send_tokens?: boolean;
            };
            implicit_hate?: {
              /** @default 0.75 */
              threshold?: number;
              /** @default false */
              send_tokens?: boolean;
            };
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              results: {
                  hap?: {
                      success: boolean;
                      score: number;
                      flagged: boolean;
                      position: {
                        start: number;
                        end: number;
                      };
                      tokens?: {
                          token?: string;
                          index?: number;
                          score?: number;
                        }[];
                    }[];
                  stigma?: {
                      success: boolean;
                      score: number;
                      flagged: boolean;
                      position: {
                        start: number;
                        end: number;
                      };
                      tokens?: {
                          token?: string;
                          index?: number;
                          score?: number;
                        }[];
                    }[];
                  implicit_hate?: {
                      success: boolean;
                      score: number;
                      flagged: boolean;
                      position: {
                        start: number;
                        end: number;
                      };
                      tokens?: {
                          token?: string;
                          index?: number;
                          score?: number;
                        }[];
                    }[];
                }[];
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/text/generation/output": {
    post: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            model_id?: string;
            prompt_id?: string;
            input?: string;
            data?: {
              example_file_ids?: string[];
              [key: string]: unknown;
            };
            parameters?: ({
              beam_width?: number | null;
              /** @enum {string|null} */
              decoding_method?: "greedy" | "sample" | null;
              max_new_tokens?: number | null;
              min_new_tokens?: number | null;
              random_seed?: number | null;
              stop_sequences?: string[] | null;
              temperature?: number | null;
              time_limit?: number | null;
              top_k?: number | null;
              top_p?: number | null;
              typical_p?: number | null;
              repetition_penalty?: number | null;
              truncate_input_tokens?: number | null;
              include_stop_sequence?: boolean;
              return_options?: ({
                generated_tokens?: boolean | null;
                input_text?: boolean | null;
                input_tokens?: boolean | null;
                input_parameters?: boolean | null;
                token_logprobs?: boolean | null;
                token_ranks?: boolean | null;
                top_n_tokens?: number | null;
              }) | null;
              length_penalty?: ({
                decay_factor?: number | null;
                start_index?: number | null;
              }) | null;
            }) | null;
            moderations?: {
              hap?: boolean | {
                input?: boolean;
                output?: boolean;
                threshold?: number;
                send_tokens?: boolean;
              };
              stigma?: boolean | {
                input?: boolean;
                output?: boolean;
                threshold?: number;
                send_tokens?: boolean;
              };
              implicit_hate?: boolean | {
                input?: boolean;
                output?: boolean;
                threshold?: number;
                send_tokens?: boolean;
              };
            };
            use_default?: boolean | null;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              results: string[];
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/text/generation/limits": {
    get: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                concurrency: {
                  limit: number;
                  remaining: number;
                };
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/text/generation/comparison": {
    post: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
      };
      requestBody: {
        content: {
          "application/json": {
            request: {
              model_id?: string;
              prompt_id?: string;
              input: string;
              data?: {
                example_file_ids?: string[];
                [key: string]: unknown;
              };
              parameters?: ({
                beam_width?: number | null;
                /** @enum {string|null} */
                decoding_method?: "greedy" | "sample" | null;
                max_new_tokens?: number | null;
                min_new_tokens?: number | null;
                random_seed?: number | null;
                stop_sequences?: string[] | null;
                temperature?: number | null;
                time_limit?: number | null;
                top_k?: number | null;
                top_p?: number | null;
                typical_p?: number | null;
                repetition_penalty?: number | null;
                truncate_input_tokens?: number | null;
                include_stop_sequence?: boolean;
                return_options?: ({
                  generated_tokens?: boolean | null;
                  input_text?: boolean | null;
                  input_tokens?: boolean | null;
                  input_parameters?: boolean | null;
                  token_logprobs?: boolean | null;
                  token_ranks?: boolean | null;
                  top_n_tokens?: number | null;
                }) | null;
                length_penalty?: ({
                  decay_factor?: number | null;
                  start_index?: number | null;
                }) | null;
              }) | null;
              moderations?: {
                hap?: boolean | {
                  input?: boolean;
                  output?: boolean;
                  threshold?: number;
                  send_tokens?: boolean;
                };
                stigma?: boolean | {
                  input?: boolean;
                  output?: boolean;
                  threshold?: number;
                  send_tokens?: boolean;
                };
                implicit_hate?: boolean | {
                  input?: boolean;
                  output?: boolean;
                  threshold?: number;
                  send_tokens?: boolean;
                };
              };
              use_default?: boolean | null;
            };
            name?: string;
            compare_parameters: {
              model_id?: string[];
              temperature?: number[];
              top_k?: number[];
              top_p?: number[];
              typical_p?: number[];
              repetition_penalty?: number[];
              length_penalty?: Record<string, never>[];
            };
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              results: ({
                  parameters: {
                    model_id?: string;
                    temperature?: number;
                    top_k?: number;
                    top_p?: number;
                    typical_p?: number;
                    repetition_penalty?: number;
                    length_penalty?: Record<string, never>;
                  };
                  error?: (({
                    status_code: number;
                    message?: string;
                    extensions?: {
                      code?: string;
                      reason?: string;
                    };
                  } | null) | ({
                    status_code: number;
                    extensions?: {
                      code?: string;
                      reason?: string;
                    };
                  } | null)) | null;
                  result?: ({
                    id: string | null;
                    model_id: string;
                    /** Format: date-time */
                    created_at: string;
                    input_parameters?: {
                      [key: string]: unknown;
                    } | null;
                    results: ({
                        input_text?: string | null;
                        generated_text: string;
                        generated_token_count: number;
                        input_token_count?: number | null;
                        /** @enum {string} */
                        stop_reason: "not_finished" | "max_tokens" | "eos_token" | "cancelled" | "time_limit" | "stop_sequence" | "token_limit" | "error";
                        stop_sequence?: string | null;
                        generated_tokens?: (({
                            text?: string | null;
                            logprob?: (number | null) | (string | null);
                            rank?: number | null;
                            top_tokens?: (({
                                text?: string | null;
                                logprob?: (number | null) | (string | null);
                              })[]) | null;
                          })[]) | null;
                        input_tokens?: (({
                            text?: string | null;
                            logprob?: (number | null) | (string | null);
                            rank?: number | null;
                            top_tokens?: (({
                                text?: string | null;
                                logprob?: (number | null) | (string | null);
                              })[]) | null;
                          })[]) | null;
                        seed?: number | null;
                        moderation?: {
                          [key: string]: unknown;
                        } | null;
                        [key: string]: unknown;
                      })[];
                  }) | null;
                })[];
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/text/extraction/limits": {
    get: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
      };
      responses: {
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/text/embeddings/limits": {
    get: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                concurrency: {
                  limit: number;
                  remaining: number;
                };
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/text/embeddings": {
    post: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
      };
      requestBody: {
        content: {
          "application/json": {
            model_id: string;
            input: string | string[];
            parameters?: ({
              truncate_input_tokens?: boolean | null;
            }) | null;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              results: number[][];
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/tasks": {
    get: {
      parameters: {
        query: {
          tune?: boolean | null;
          version: "2023-11-22";
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              results: {
                  id: string;
                  name: string;
                  json_example?: string;
                  jsonl_example?: string;
                  csv_example?: string;
                  verbalizer?: string;
                  file_format_id?: number;
                  tune: boolean;
                  categorization: boolean;
                }[];
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/tags": {
    get: {
      parameters: {
        query: {
          limit?: number;
          offset?: number;
          type?: "language" | "industry" | "model_type";
          version: "2023-11-22";
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              results: ({
                  id: string;
                  name: string;
                  /** @enum {string} */
                  type: "language" | "industry" | "model_type";
                })[];
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/system_prompts/{id}": {
    get: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                id: number;
                name: string;
                content: string;
                /** Format: date-time */
                created_at: string;
                /** @enum {string} */
                type: "private" | "system";
                author?: {
                  id: number;
                  first_name?: string;
                  last_name?: string;
                };
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
    put: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
        path: {
          id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            content: string;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                id: number;
                name: string;
                content: string;
                /** Format: date-time */
                created_at: string;
                /** @enum {string} */
                type: "private" | "system";
                author?: {
                  id: number;
                  first_name?: string;
                  last_name?: string;
                };
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
    delete: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        204: {
          content: never;
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/system_prompts": {
    get: {
      parameters: {
        query: {
          limit?: number;
          offset?: number;
          version: "2023-11-22";
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              results: ({
                  id: number;
                  name: string;
                  content: string;
                  /** Format: date-time */
                  created_at: string;
                  /** @enum {string} */
                  type: "private" | "system";
                  author?: {
                    id: number;
                    first_name?: string;
                    last_name?: string;
                  };
                })[];
              total_count: number;
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
    post: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
            content: string;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                id: number;
                name: string;
                content: string;
                /** Format: date-time */
                created_at: string;
                /** @enum {string} */
                type: "private" | "system";
                author?: {
                  id: number;
                  first_name?: string;
                  last_name?: string;
                };
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/requests/{id}/feedback": {
    get: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                id: number;
                /** Format: date-time */
                created_at: string;
                /** Format: date-time */
                updated_at: string;
                comment?: string | null;
                categories: string[];
                api_request: string;
                /** @enum {string|null} */
                vote?: "up" | "down" | null;
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
    put: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            comment?: string;
            categories?: ("inaccurate" | "not_relevant" | "offensive_harmful" | "knowledge_gap" | "other_content" | "too_long" | "too_short" | "wrong_tone" | "wrong_format" | "other_style" | "correct_content" | "correct_style")[];
            /** @enum {string} */
            vote?: "up" | "down";
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                id: number;
                /** Format: date-time */
                created_at: string;
                /** Format: date-time */
                updated_at: string;
                comment?: string | null;
                categories: string[];
                api_request: string;
                /** @enum {string|null} */
                vote?: "up" | "down" | null;
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
    post: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            comment?: string;
            categories?: ("inaccurate" | "not_relevant" | "offensive_harmful" | "knowledge_gap" | "other_content" | "too_long" | "too_short" | "wrong_tone" | "wrong_format" | "other_style" | "correct_content" | "correct_style")[];
            /** @enum {string} */
            vote?: "up" | "down";
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                id: number;
                /** Format: date-time */
                created_at: string;
                /** Format: date-time */
                updated_at: string;
                comment?: string | null;
                categories: string[];
                api_request: string;
                /** @enum {string|null} */
                vote?: "up" | "down" | null;
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/requests/{id}": {
    delete: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        204: {
          content: never;
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/requests/chat/{conversation_id}": {
    get: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
        path: {
          conversation_id: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              results: ({
                  id: string;
                  duration: number;
                  /** Format: date-time */
                  created_at: string;
                  request: {
                    model_id?: string;
                    prompt_template_id?: string | null;
                    moderations?: {
                      hap?: boolean | {
                        input?: boolean;
                        output?: boolean;
                        threshold?: number;
                        send_tokens?: boolean;
                      };
                      stigma?: boolean | {
                        input?: boolean;
                        output?: boolean;
                        threshold?: number;
                        send_tokens?: boolean;
                      };
                      implicit_hate?: boolean | {
                        input?: boolean;
                        output?: boolean;
                        threshold?: number;
                        send_tokens?: boolean;
                      };
                    };
                    messages?: ({
                        /** @enum {string} */
                        role: "user" | "system" | "assistant";
                        content: string;
                        file_ids?: string[];
                      })[];
                    conversation_id?: string | null;
                    parent_id?: string | null;
                    prompt_id?: string;
                    /** @enum {string} */
                    trim_method?: "floating_window" | "none";
                    use_conversation_parameters?: boolean;
                    parameters?: ({
                      beam_width?: number | null;
                      /** @enum {string|null} */
                      decoding_method?: "greedy" | "sample" | null;
                      max_new_tokens?: number | null;
                      min_new_tokens?: number | null;
                      random_seed?: number | null;
                      stop_sequences?: string[] | null;
                      temperature?: number | null;
                      time_limit?: number | null;
                      top_k?: number | null;
                      top_p?: number | null;
                      typical_p?: number | null;
                      repetition_penalty?: number | null;
                      truncate_input_tokens?: number | null;
                      include_stop_sequence?: boolean;
                      return_options?: ({
                        generated_tokens?: boolean | null;
                        input_text?: boolean | null;
                        input_tokens?: boolean | null;
                        input_parameters?: boolean | null;
                        token_logprobs?: boolean | null;
                        token_ranks?: boolean | null;
                        top_n_tokens?: number | null;
                      }) | null;
                      length_penalty?: ({
                        decay_factor?: number | null;
                        start_index?: number | null;
                      }) | null;
                    }) | null;
                  };
                  /** @enum {string} */
                  status: "success" | "error";
                  response: {
                    id?: string | null;
                    model_id?: string;
                    /** Format: date-time */
                    created_at?: string;
                    input_parameters?: {
                      [key: string]: unknown;
                    } | null;
                    results: ({
                        input_text?: string | null;
                        generated_text: string;
                        generated_token_count: number;
                        input_token_count?: number | null;
                        /** @enum {string} */
                        stop_reason: "not_finished" | "max_tokens" | "eos_token" | "cancelled" | "time_limit" | "stop_sequence" | "token_limit" | "error";
                        stop_sequence?: string | null;
                        generated_tokens?: (({
                            text?: string | null;
                            logprob?: (number | null) | (string | null);
                            rank?: number | null;
                            top_tokens?: (({
                                text?: string | null;
                                logprob?: (number | null) | (string | null);
                              })[]) | null;
                          })[]) | null;
                        input_tokens?: (({
                            text?: string | null;
                            logprob?: (number | null) | (string | null);
                            rank?: number | null;
                            top_tokens?: (({
                                text?: string | null;
                                logprob?: (number | null) | (string | null);
                              })[]) | null;
                          })[]) | null;
                        seed?: number | null;
                        moderation?: {
                          [key: string]: unknown;
                        } | null;
                        [key: string]: unknown;
                      })[];
                    conversation_id: string;
                  };
                  version?: ({
                    api?: string | null;
                    /** Format: date */
                    date?: string | null;
                  }) | null;
                  parent_id?: string | null;
                  [key: string]: unknown;
                })[];
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
    delete: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
        path: {
          conversation_id: string;
        };
      };
      responses: {
        /** @description Success */
        204: {
          content: never;
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/requests": {
    get: {
      parameters: {
        query: {
          limit?: number;
          offset?: number;
          status?: "success" | "error";
          origin?: "api" | "ui";
          before?: string;
          after?: string;
          endpoint?: ("generate" | "compare" | "chat") | (("generate" | "compare" | "chat")[]);
          api?: "v0" | "v1" | "v2";
          date?: string;
          version: "2023-11-22";
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              results: ({
                  id: string;
                  duration: number;
                  /** Format: date-time */
                  created_at: string;
                  request?: {
                    [key: string]: unknown;
                  } | null;
                  /** @enum {string} */
                  status: "success" | "error";
                  response?: {
                    [key: string]: unknown;
                  } | null;
                  version?: ({
                    api?: string | null;
                    /** Format: date */
                    date?: string | null;
                  }) | null;
                  [key: string]: unknown;
                })[];
              total_count: number;
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/models": {
    get: {
      parameters: {
        query: {
          limit: number;
          offset: number;
          type?: "model" | "tune";
          version: "2023-11-22";
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              results: ({
                  id: string;
                  name: string;
                  size: string;
                  label: string;
                  warning?: string;
                  source_model_id?: string | null;
                  is_live: boolean;
                  facets?: ({
                      id: string;
                      name: string;
                      /** @enum {string} */
                      type: "language" | "industry" | "model_type";
                    })[];
                  token_limits: {
                      beam_width: number;
                      token_limit: number;
                    }[];
                  task_ids: string[];
                })[];
              total_count: number;
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/folders": {
    get: {
      parameters: {
        query: {
          limit?: number;
          offset?: number;
          version: "2023-11-22";
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              results: {
                  id: string;
                  name: string;
                  /** Format: date-time */
                  created_at: string;
                  prompt_ids?: string[];
                }[];
              total_count: number;
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
    post: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name: string;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                id: string;
                name: string;
                /** Format: date-time */
                created_at: string;
                prompt_ids?: string[];
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/files/{id}/content": {
    get: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/octet-stream": Blob;
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/beta/text/sentence-similarity": {
    post: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
      };
      requestBody: {
        content: {
          "application/json": {
            model_id: string;
            source_sentence: string;
            sentences: string[];
            parameters?: ({
              truncate_input_tokens?: boolean | null;
            }) | null;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              results: {
                  score: number;
                }[];
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/beta/text/rerank": {
    post: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
      };
      requestBody: {
        content: {
          "application/json": {
            model_id: string;
            query: string;
            documents: string[];
            parameters?: ({
              truncate_input_tokens?: boolean | null;
              return_options?: {
                top_n?: number | null;
                query?: boolean | null;
                documents?: boolean | null;
              };
            }) | null;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                query?: string;
                results: {
                    score: number;
                  }[];
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/beta/text/classification": {
    post: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
      };
      requestBody: {
        content: {
          "application/json": {
            model_id: string;
            input: string;
            data: {
                text: string;
                labels: string[];
              }[];
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              result: {
                predictions: string[];
                log_likelihood: {
                  [key: string]: number;
                };
                /** @enum {string} */
                classification_type: "multi_class" | "multi_label" | "binary";
                model_input: string;
                model_output: string;
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/api_key/regenerate": {
    post: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              /** @description The valid JWT token must be sent to return a valid API key. The API key always exists for each user in the System. */
              result?: {
                value: string;
                /** Format: date-time */
                created_at: string;
                /** Format: date-time */
                last_used_at?: string;
                /** Format: date-time */
                generated_at: string;
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The server can not find requested resource. */
        404: {
          content: {
            "application/json": components["schemas"]["NotFoundResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
  "/v2/api_key": {
    get: {
      parameters: {
        query: {
          version: "2023-11-22";
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          content: {
            "application/json": {
              /** @description The valid JWT token must be sent to return a valid API key. The API key always exists for each user in the System. */
              result?: {
                value: string;
                /** Format: date-time */
                created_at: string;
                /** Format: date-time */
                last_used_at?: string;
                /** Format: date-time */
                generated_at: string;
              };
            };
          };
        };
        /** @description Server could not understand the request due to invalid syntax. In most cases relates with the schema validation. */
        400: {
          content: {
            "application/json": components["schemas"]["BadRequestResponse"];
          };
        };
        /** @description Unauthorized route access. */
        401: {
          content: {
            "application/json": components["schemas"]["UnauthorizedResponse"];
          };
        };
        /** @description The user has sent too many requests in a given amount of time ("rate limiting").. */
        429: {
          content: {
            "application/json": components["schemas"]["TooManyRequestsResponse"];
          };
        };
        /** @description The server encountered an unexpected condition that prevented it from fulfilling the request. */
        500: {
          content: {
            "application/json": components["schemas"]["InternalServerErrorResponse"];
          };
        };
        /** @description The remote server is not ready to handle the request. */
        503: {
          content: {
            "application/json": components["schemas"]["UnavailableResponse"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    BaseErrorExtension: {
      code: string;
      state?: {
        [key: string]: unknown;
      } | null;
    };
    BaseErrorResponse: {
      error: string;
      message: string;
      status_code: number;
      extensions: components["schemas"]["BaseErrorExtension"];
    };
    UnauthorizedResponse: components["schemas"]["BaseErrorResponse"] & ({
      /** @enum {unknown} */
      status_code: 401;
      extensions: components["schemas"]["BaseErrorExtension"] & {
        /** @enum {unknown} */
        code: "AUTH_ERROR";
      };
    });
    NotFoundResponse: components["schemas"]["BaseErrorResponse"] & ({
      /** @enum {unknown} */
      status_code: 404;
      extensions: components["schemas"]["BaseErrorExtension"] & {
        /** @enum {unknown} */
        code: "NOT_FOUND";
      };
    });
    TooManyRequestsResponse: components["schemas"]["BaseErrorResponse"] & ({
      /** @enum {unknown} */
      status_code: 429;
      extensions: components["schemas"]["BaseErrorExtension"] & {
        /** @enum {unknown} */
        code: "TOO_MANY_REQUESTS";
      };
    });
    BadRequestResponse: components["schemas"]["BaseErrorResponse"] & ({
      /** @enum {unknown} */
      status_code: 400;
      extensions: components["schemas"]["BaseErrorExtension"] & {
        /** @enum {unknown} */
        code: "INVALID_INPUT";
      };
    });
    InternalServerErrorResponse: components["schemas"]["BaseErrorResponse"] & ({
      /** @enum {unknown} */
      status_code: 500;
      extensions: components["schemas"]["BaseErrorExtension"] & {
        /** @enum {unknown} */
        code: "INTERNAL_SERVER_ERROR";
      };
    });
    UnavailableResponse: components["schemas"]["BaseErrorResponse"] & ({
      /** @enum {unknown} */
      status_code: 503;
      extensions: components["schemas"]["BaseErrorExtension"] & {
        /** @enum {unknown} */
        code: "SERVICE_UNAVAILABLE";
      };
    });
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
